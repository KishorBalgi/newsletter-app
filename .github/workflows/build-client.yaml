name: Frontend - Build and Push Docker Image
run-name: Building and Pushing Docker Image for the Frontend

on:
  push:
    branches:
      - main
    paths:
      - apps/client/**
  workflow_dispatch:

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile_NextJS
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/my-workspace:newsletter-client
          build-args: |
            WORKSPACE=newsletter-client
            APP=client

  deploy:
    runs-on: ubuntu-latest
    environment: AWS_Deployment
    needs: build-and-push
    steps:
      - name: Execute Docker Commands on AWS Instance to deploy the application
        run: |
          command_id=$(aws ssm send-command \
            --instance-ids ${{ env.INSTANCE_ID }} \
            --document-name "AWS-RunShellScript" \
            --comment "Executing Docker operations" \
            --parameters commands='[
              "set -e",
              "trap '\''echo DOCKER_STOP_FAILURE 1>&2'\'' ERR; if sudo docker ps --format '\''{{.Names}}'\'' | grep -q ${{ env.CLIENT_CONTIANER_NAME }}; then sudo docker stop ${{ env.CLIENT_CONTIANER_NAME }}; fi",
              "trap '\''echo DOCKER_RENAME_FAILURE 1>&2'\'' ERR; if sudo docker ps -a --format '\''{{.Names}}'\'' | grep -q ${{ env.CLIENT_CONTIANER_NAME }}; then sudo docker rename ${{ env.CLIENT_CONTIANER_NAME }} ${{ env.CLIENT_CONTIANER_NAME }}-${GITHUB_RUN_NUMBER}; fi",
              "trap '\''echo DOCKER_LOGIN_FAILURE 1>&2'\'' ERR; sudo docker login --username ${{ secrets.DOCKERHUB_USERNAME }} --password ${{ secrets.DOCKERHUB_TOKEN }}",
              "trap '\''echo DOCKER_PULL_FAILURE 1>&2'\'' ERR; sudo docker pull ${{ env.CLIENT_IMAGE_TO_DEPLOY }}",
              "trap '\''echo DOCKER_RUN_FAILURE 1>&2'\'' ERR; sudo docker run -d -p 80:80 --name ${{ env.CLIENT_CONTIANER_NAME }} ${{ env.CLIENT_IMAGE_TO_DEPLOY }}"
            ]' --query 'Command.CommandId' --output text)

          echo "command_id=$command_id" >> $GITHUB_ENV

      # - name: Retrieve and Store SSM Command Results
      #   run: |
      #     aws ssm wait command-executed \
      #       --command-id ${{ env.command_id }} \
      #       --instance-id ${{ env.INSTANCE_ID }} || true
      #     ssm_command_output=$(aws ssm get-command-invocation \
      #           --command-id ${{ env.command_id }} \
      #           --instance-id ${{ env.INSTANCE_ID }})

      #     standard_error_content=$(echo "$ssm_command_output" | jq -r '.StandardErrorContent')
      #     standard_error_content=${standard_error_content//$'\n'/' '}
      #     status=$(echo "$ssm_command_output" | jq -r '.Status')

      #     echo "status=$status" >> $GITHUB_ENV
      #     echo "standard_error_content=$standard_error_content" >> $GITHUB_ENV
